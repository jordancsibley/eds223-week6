---
title: "EDS 223: Week 6 Vector and raster interactions cont.; False color images"
format: html
---

### Load libraries

```{r}
library(sf)
library(terra)
library(tidyverse)
library(tmap)
library(spDataLarge)
```

# Raster-vector interactions

## 2. Rasterization

“Rasterization” is the process of representing vector objects as raster objects. You might consider “rasterizing” vector data for the following reasons:

-   to use in an analysis that benefits from raster operations (e.g. map algebra)
-   standardize with other data used in analysis
-   simplify data to reduce computational load
-   aggregated data to standard grid

To “rasterize” data using the {terra} package, we use the `rasterize()` function. The first two arguments define the following:

-  x: vector object to be “rasterized”
-  y: a ‘template’ raster object defining the extent, resolution, and CRS of the output

### Line and polygon rasterization 

We are going to be using the Zion National Park data again 
```{r}
# load Zion park boundary (vector object to rasterize)
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge")) 

# load elevation raster to use as template raster object
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

# check and transform coordinate reference systems
if(crs(elevation) == crs(boundary)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
  # transform data to match
  boundary <- st_transform(boundary, st_crs(elevation))
}
```


Rasterization gives different results for polygon versus line vector objects.

-  Rasterized polygons: all grid cells intersecting polygon (including cells inside polygon)
-  Rasterized lines: grid cells intersecting line (excluding cells potentially enclose by line)

 We can always inspect the geometry type of a vector object using `sf::st_geometry_type()`

```{r}
# Check if the park boundary is a polygon or line 
if(sf::st_geometry_type(boundary) == "POLYGON") {
  print("polygon data")
} else {
  print("not polygon data") # if not polygon, it is likely a line
}
```


```{r}
# Make a copy of boundary 
park_polygon <- boundary 

# Create a line version of the park boundary 
park_border <- boundary %>%
  sf::st_cast(., "MULTILINESTRING")

# Map the park boundary polygon
tm_shape(park_polygon) +
  tm_polygons()
 
# Map the park boundary as a line  
tm_shape(park_border) +
  tm_lines()
```


Now lets rasterize the polygon and the line! 
```{r}
# Rasterize the park polygon using elevation as template geometries
polygon_raster <- terra::rasterize(park_polygon, elevation)

# Same but with border 
border_raster <- terra::rasterize(park_border, elevation)

# Plot the polygon raster
map1 <- tm_shape(polygon_raster) +
  tm_raster() +
  tm_layout(main.title = "rasterized polygon")

# Plot the line raster
map2 <- tm_shape(border_raster) +
  tm_raster() +
  tm_layout(main.title = "rasterized line")

# Arrange next to each other 
tmap_arrange(map1, map2, nrow = 1)
```

Using a custom template raster is a great way to see how the resolution impacts the results of rasterization

Here we will create different versions of the polygon raster but with different resolutions: 
```{r}
# create low spatial resolution template raster
template_raster_low <- terra::rast(ext(park_polygon), resolution = 0.05,
                        crs = st_crs(park_polygon))

# create high spatial resolution template raster
template_raster_high <- terra::rast(ext(park_polygon), resolution = 0.01,
                        crs = st_crs(park_polygon))

# rasterize to low resolution template raster
polygon_raster_low <- terra::rasterize(park_polygon, template_raster_low)

# rasterize to high resolution template raster
polygon_raster_high <- terra::rasterize(park_polygon, template_raster_high)
```


```{r}
# Map the high resolution 
tm_shape(polygon_raster_high) +
  tm_raster()
```

High resolution looks similar to the originial, maybe a bit more "blockier"

```{r}
# Map the low resolution 
tm_shape(polygon_raster_low) +
  tm_raster()
```

Gives the basic shape of the park, but is missing the resolution to show the specific border. 


### Rasterizing point data 

We can do the same process with point data. However you can perform more complex operations such as counting the number of points in each grid cell or even summarize the attributes of points within each cell.

Let's try this with the cycle hire points in London 
```{r}
# define point data
cycle_hire_osm <- spData::cycle_hire_osm

# transform to projected CRS
cycle_hire_osm_projected = sf::st_transform(cycle_hire_osm, "EPSG:27700")

# define raster template
template_raster <- terra::rast(ext(cycle_hire_osm_projected), 
                               resolution = 1000,
                               crs = crs(cycle_hire_osm_projected))
```

```{r}
# Plot the point data 
tm_shape(cycle_hire_osm_projected) +
  tm_symbols()
```


In the following code chunk we’ll perform three versions of rasterization to produce the following:

-  raster representing the presence/absence of cycle hire points
-  raster representing the number of cycle hire points
-  raster representing the total capacity of cycle hire points

To represent the **presence/absence** of cycle hire points, we use the same procedure as before.

```{r}
# Presence/absence of cycle hire points 
ch_raster1 <- terra::rasterize(cycle_hire_osm_projected,
                               template_raster)

tm_shape(ch_raster1) +
  tm_raster()
```


To represent the number of cycle hire points, we use the `fun` argument which allows for various summarizing functions. Setting the argument `fun = "length"` will return a count of the number of points in each cell


```{r}
ch_raster2 <- terra::rasterize(cycle_hire_osm_projected,
                               template_raster,
                               fun = "length") # counts up the points in each grid cell  

tm_shape(ch_raster2) +
  tm_raster(title = "Number of cycle hire points ")
```

To represent the total capacity of cycle hire points, we need to take the sum of each points’ capacity. We can do this by defining which field we would like to aggregate (in this case `capacity`) and what aggregating function we would like to use (in this case `fun = sum`).

```{r}
ch_raster3 <- terra::rasterize(cycle_hire_osm_projected,
                               template_raster,
                               field = "capacity",
                               fun = sum,
                               na.rm = TRUE)

tm_shape(ch_raster3) +
  tm_raster(title = "Total Capacity")
```


# False color imagery 

### True vs. False color imagery 

- True : displays red, green, blue RS bands in the red, green, blue channels, respectively
- False: displays red, green, blue RS bands not necessarily in the red, green, and blue channels


In this example, we'll work with a remote sensing image of Olinda, Brazil 


Landsat-7 bands 

Band 1:	0.45 - 0.52 micrometers (blue)

Band 2:	0.52 - 0.60 micrometers (green)

Band 3:	0.63 - 0.69 micrometers (red)

Band 4:	0.77 - 0.90 micrometers (near-infrared)

Band 5:	1.55 - 1.75 micrometers (short-wave infrared)

Band 7:	2.08 - 2.35 micrometers (mid-infrared)

```{r}
# load Landsat image
L7 <- terra::rast(system.file("tif/L7_ETMs.tif", package = "stars"))

# Map the true color image 
map1<- tm_shape(L7) +
  tm_rgb(r = 3, g = 2, b = 1) +
  tm_layout(main.title = "true color")

# NIR, red, green 
map2<- tm_shape(L7) +
  tm_rgb(r = 4, g = 3, b = 2) +
   tm_layout(main.title = "NIR, red, green")

# Shortwave infrared, NIR, green
map3<- tm_shape(L7) +
  tm_rgb(r = 5, g = 4, b = 2) +
   tm_layout(main.title = "SWIR, NIR, green")

tmap_arrange(map1, map2, map3, nrow = 1)

```

